// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241110012038_Trip")]
    partial class Trip
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Domain.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float?>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PayState")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Bills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1500f,
                            PayState = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Dni")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Dni = "12345678",
                            Email = "admin@gmail.com",
                            LastName = "User",
                            Name = "Admin",
                            Password = "string",
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            Dni = "87654321",
                            Email = "driver@gmail.com",
                            LastName = "Doe",
                            Name = "John",
                            Password = "string",
                            Role = 2
                        },
                        new
                        {
                            Id = 3,
                            Dni = "11223344",
                            Email = "client@gmail.com",
                            LastName = "Smith",
                            Name = "Jane",
                            Password = "string",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BillId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartingPoint")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TruckDriverId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ClientId");

                    b.HasIndex("TruckDriverId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 3,
                            DepartureDate = new DateTime(2024, 11, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Rosario",
                            StartingPoint = "Buenos Aires",
                            TruckDriverId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Domain.Entities.TruckDriver", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<string>("TruckPatent")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("TruckDriver");
                });

            modelBuilder.Entity("Domain.Entities.Bill", b =>
                {
                    b.HasOne("Domain.Entities.Client", null)
                        .WithMany("Bill")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Trip", b =>
                {
                    b.HasOne("Domain.Entities.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId");

                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Trips")
                        .HasForeignKey("ClientId");

                    b.HasOne("Domain.Entities.TruckDriver", "TruckDriver")
                        .WithMany()
                        .HasForeignKey("TruckDriverId");

                    b.Navigation("Bill");

                    b.Navigation("Client");

                    b.Navigation("TruckDriver");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Bill");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
